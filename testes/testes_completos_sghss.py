# testes_completos_sghss.py
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time
import sys
import os

# CONFIGURA√á√ÉO GERAL
URL_BASE = "file:///C:/Users/emanu/OneDrive/SGHSS - UNINTER PROJETO FINAL/GitHub/SGHSS"
CHROME_PATH = r"C:\Users\emanu\OneDrive\SGHSS - UNINTER PROJETO FINAL\GitHub\SGHSS\testes\Chrome\chrome.exe"

# DADOS DE TESTE
CPF_ADMIN = "00000000000"
SENHA_ADMIN = "admin123"
CPF_PACIENTE = "12345678900"
NOME_PACIENTE = "Ana Souza"

HEADLESS = False

class SGHSSTestSuite:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.resultados = []
        
    def setup_driver(self):
        """Configura o navegador Chrome"""
        options = webdriver.ChromeOptions()
        if HEADLESS:
            options.add_argument("--headless=new")
            options.add_argument("--disable-gpu")
        options.add_argument("--start-maximized")
        options.add_argument("--window-size=1366,768")
        options.binary_location = CHROME_PATH
        
        # Adicionar argumentos para melhor estabilidade
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-notifications")
        
        try:
            self.driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()), 
                options=options
            )
            self.wait = WebDriverWait(self.driver, 15)
            print("‚úÖ Navegador configurado com sucesso")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao configurar navegador: {e}")
            return False
    
    def find_input(self, possible_ids):
        """Tenta localizar um input por v√°rias estrat√©gias"""
        for locator in possible_ids:
            try:
                return self.driver.find_element(*locator)
            except Exception:
                continue
        return None
    
    def login(self, cpf=CPF_ADMIN, senha=SENHA_ADMIN):
        """Realiza login no sistema"""
        try:
            print(f"\nüîê Realizando login com CPF: {cpf}")
            self.driver.get(f"{URL_BASE}/index.html")
            
            # Espera carregar os inputs
            self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "input")))
            
            # Localiza campos de login
            possible_username_locators = [
                (By.ID, "username"),
                (By.ID, "cpf"),
                (By.NAME, "username"),
                (By.NAME, "cpf"),
                (By.CSS_SELECTOR, "input[type='text']"),
                (By.CSS_SELECTOR, "input[placeholder*='CPF']"),
                (By.CSS_SELECTOR, "input[placeholder*='cpf']"),
            ]
            
            possible_password_locators = [
                (By.ID, "password"),
                (By.NAME, "password"),
                (By.CSS_SELECTOR, "input[type='password']"),
                (By.CSS_SELECTOR, "input[placeholder*='Senha']"),
                (By.CSS_SELECTOR, "input[placeholder*='senha']"),
            ]
            
            username_input = self.find_input(possible_username_locators)
            password_input = self.find_input(possible_password_locators)
            
            if not username_input or not password_input:
                inputs = self.driver.find_elements(By.TAG_NAME, "input")
                if len(inputs) >= 2:
                    username_input = username_input or inputs[0]
                    password_input = password_input or inputs[1]
            
            if not username_input or not password_input:
                print("‚ùå Campos de login n√£o encontrados")
                return False
            
            # Preenche e envia formul√°rio
            username_input.clear()
            username_input.send_keys(cpf)
            password_input.clear()
            password_input.send_keys(senha)
            
            # Clica no bot√£o de login
            try:
                btn = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
                btn.click()
            except:
                password_input.send_keys("\n")
            
            # Verifica sucesso
            try:
                self.wait.until(EC.url_contains("dashboard"))
                print("‚úÖ Login realizado com sucesso")
                return True
            except TimeoutException:
                # Verifica se est√° no dashboard por elementos
                possible_post_login = [
                    (By.CSS_SELECTOR, ".dashboard"),
                    (By.XPATH, "//*[contains(text(), 'Dashboard') or contains(text(), 'Bem-vindo')]"),
                ]
                for loc in possible_post_login:
                    try:
                        self.wait.until(EC.presence_of_element_located(loc))
                        print("‚úÖ Login realizado com sucesso")
                        return True
                    except:
                        continue
                print("‚ùå Login falhou")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro no login: {e}")
            return False
    
    def test_dashboard(self):
        """Testa a p√°gina do dashboard"""
        try:
            print("\nüìä Testando Dashboard...")
            self.driver.get(f"{URL_BASE}/dashboard.html")
            
            # Verifica elementos principais
            elementos = [
                ("Cadastro Geral", "cadastro.html"),
                ("Agendar Consulta", "agendamento.html"),
                ("Ver Pacientes", "consultas.html"),
                ("Agenda M√©dica", "agenda.html"),
                ("Prescri√ß√µes", "prescricoes.html"),
            ]
            
            for texto, link in elementos:
                try:
                    elemento = self.wait.until(EC.presence_of_element_located(
                        (By.XPATH, f"//*[contains(text(), '{texto}')]"))
                    )
                    print(f"‚úÖ Elemento '{texto}' encontrado")
                    self.resultados.append(f"‚úÖ Dashboard - {texto}: ENCONTRADO")
                except:
                    print(f"‚ùå Elemento '{texto}' n√£o encontrado")
                    self.resultados.append(f"‚ùå Dashboard - {texto}: N√ÉO ENCONTRADO")
            
            # Verifica gr√°ficos
            try:
                grafico = self.wait.until(EC.presence_of_element_located(
                    (By.CSS_SELECTOR, "canvas"))
                )
                print("‚úÖ Gr√°fico encontrado no dashboard")
                self.resultados.append("‚úÖ Dashboard - Gr√°ficos: ENCONTRADO")
            except:
                print("‚ùå Gr√°fico n√£o encontrado no dashboard")
                self.resultados.append("‚ùå Dashboard - Gr√°ficos: N√ÉO ENCONTRADO")
                
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste do dashboard: {e}")
            return False
    
    def test_cadastro_paciente(self):
        """Testa o cadastro de pacientes"""
        try:
            print("\nüë§ Testando Cadastro de Pacientes...")
            self.driver.get(f"{URL_BASE}/cadastro.html")
            
            # Preenche formul√°rio
            self.wait.until(EC.presence_of_element_located((By.ID, "tipoUsuario")))
            
            # Seleciona tipo paciente
            select_tipo = self.driver.find_element(By.ID, "tipoUsuario")
            select_tipo.send_keys("Paciente")
            
            # Preenche dados
            campos = {
                "nome": "Teste Selenium",
                "cpf": "11111111111",
                "nascimento": "1990-01-01",
                "email": "teste.selenium@email.com",
                "senha": "senha123"
            }
            
            for campo_id, valor in campos.items():
                elemento = self.driver.find_element(By.ID, campo_id)
                elemento.clear()
                elemento.send_keys(valor)
            
            # Envia formul√°rio
            btn_submit = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            btn_submit.click()
            
            # Verifica se foi salvo
            time.sleep(2)
            try:
                lista = self.driver.find_element(By.ID, "listaCadastros")
                if "Teste Selenium" in lista.text:
                    print("‚úÖ Paciente cadastrado com sucesso")
                    self.resultados.append("‚úÖ Cadastro - Paciente: CADASTRADO")
                    return True
                else:
                    print("‚ùå Paciente n√£o encontrado na lista")
                    self.resultados.append("‚ùå Cadastro - Paciente: N√ÉO ENCONTRADO")
                    return False
            except:
                print("‚ùå Erro ao verificar lista de cadastros")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro no teste de cadastro: {e}")
            return False
    
    def test_agendamento_consulta(self):
        """Testa o agendamento de consultas"""
        try:
            print("\nüìÖ Testando Agendamento de Consultas...")
            self.driver.get(f"{URL_BASE}/agendamento.html")
            
            # Espera carregar os elementos
            self.wait.until(EC.presence_of_element_located((By.ID, "nomePaciente")))
            
            # Seleciona paciente (primeiro da lista)
            select_paciente = self.driver.find_element(By.ID, "nomePaciente")
            select_paciente.send_keys(NOME_PACIENTE)
            
            # Seleciona especialidade
            select_especialidade = self.driver.find_element(By.ID, "especialidade")
            select_especialidade.send_keys("Cl√≠nico Geral")
            
            # Seleciona data e hora
            data_input = self.driver.find_element(By.ID, "dataConsulta")
            data_input.clear()
            data_input.send_keys("2025-12-20")
            
            hora_input = self.driver.find_element(By.ID, "horaConsulta")
            hora_input.clear()
            hora_input.send_keys("14:30")
            
            # Envia formul√°rio
            btn_submit = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            btn_submit.click()
            
            # Verifica mensagem de sucesso
            time.sleep(2)
            try:
                mensagem = self.driver.find_element(By.ID, "mensagemAgendamento")
                if "sucesso" in mensagem.text.lower():
                    print("‚úÖ Consulta agendada com sucesso")
                    self.resultados.append("‚úÖ Agendamento - Consulta: AGENDADA")
                    return True
                else:
                    print("‚ùå Mensagem de sucesso n√£o encontrada")
                    self.resultados.append("‚ùå Agendamento - Consulta: FALHA")
                    return False
            except:
                print("‚ùå Erro ao verificar mensagem de agendamento")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro no teste de agendamento: {e}")
            return False
    
    def test_prontuarios(self):
        """Testa o sistema de prontu√°rios eletr√¥nicos"""
        try:
            print("\nüìã Testando Prontu√°rios Eletr√¥nicos...")
            self.driver.get(f"{URL_BASE}/prontuarios.html")
            
            # Espera carregar
            self.wait.until(EC.presence_of_element_located((By.ID, "filtroPaciente")))
            
            # Busca paciente
            filtro = self.driver.find_element(By.ID, "filtroPaciente")
            filtro.clear()
            filtro.send_keys(NOME_PACIENTE)
            
            time.sleep(1)
            
            # Seleciona paciente na lista
            try:
                paciente_item = self.driver.find_element(By.XPATH, f"//*[contains(text(), '{NOME_PACIENTE}')]")
                paciente_item.click()
                print("‚úÖ Paciente selecionado")
            except:
                print("‚ùå Paciente n√£o encontrado na lista")
                return False
            
            # Acessa prontu√°rio
            time.sleep(1)
            try:
                visualizar_btn = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Visualizar Prontu√°rio')]")
                visualizar_btn.click()
                print("‚úÖ Acessando prontu√°rio")
            except:
                print("‚ùå Bot√£o de visualizar n√£o encontrado")
                return False
            
            # Verifica se est√° na aba de visualiza√ß√£o
            time.sleep(2)
            try:
                aba_visualizar = self.driver.find_element(By.ID, "visualizar-tab")
                if "active" in aba_visualizar.get_attribute("class"):
                    print("‚úÖ Prontu√°rio acessado com sucesso")
                    self.resultados.append("‚úÖ Prontu√°rios - Acesso: SUCESSO")
                    return True
                else:
                    print("‚ùå N√£o foi poss√≠vel acessar o prontu√°rio")
                    self.resultados.append("‚ùå Prontu√°rios - Acesso: FALHA")
                    return False
            except:
                print("‚ùå Erro ao verificar aba de prontu√°rio")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro no teste de prontu√°rios: {e}")
            return False
    
    def test_relatorios(self):
        """Testa o sistema de relat√≥rios financeiros"""
        try:
            print("\nüìà Testando Relat√≥rios Financeiros...")
            self.driver.get(f"{URL_BASE}/relatorios.html")
            
            # Espera carregar
            self.wait.until(EC.presence_of_element_located((By.ID, "periodo")))
            
            # Seleciona per√≠odo
            periodo = self.driver.find_element(By.ID, "periodo")
            periodo.send_keys("M√™s Atual")
            
            # Seleciona tipo de relat√≥rio
            tipo_relatorio = self.driver.find_element(By.ID, "tipoRelatorio")
            tipo_relatorio.send_keys("Geral")
            
            # Atualiza relat√≥rio
            btn_atualizar = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Atualizar')]")
            btn_atualizar.click()
            
            # Espera carregar gr√°ficos
            time.sleep(3)
            
            # Verifica gr√°ficos
            try:
                grafico_receita = self.driver.find_element(By.ID, "graficoReceita")
                print("‚úÖ Gr√°fico de receita encontrado")
                self.resultados.append("‚úÖ Relat√≥rios - Gr√°fico Receita: ENCONTRADO")
            except:
                print("‚ùå Gr√°fico de receita n√£o encontrado")
                self.resultados.append("‚ùå Relat√≥rios - Gr√°fico Receita: N√ÉO ENCONTRADO")
            
            # Verifica tabela
            try:
                tabela = self.driver.find_element(By.ID, "tabelaTransacoes")
                if "Transa√ß√µes" in tabela.text:
                    print("‚úÖ Tabela de transa√ß√µes encontrada")
                    self.resultados.append("‚úÖ Relat√≥rios - Tabela: ENCONTRADA")
                else:
                    print("‚ùå Tabela de transa√ß√µes n√£o encontrada")
                    self.resultados.append("‚ùå Relat√≥rios - Tabela: N√ÉO ENCONTRADA")
            except:
                print("‚ùå Erro ao verificar tabela de transa√ß√µes")
                self.resultados.append("‚ùå Relat√≥rios - Tabela: ERRO")
            
            # Testa exporta√ß√£o
            try:
                btn_exportar = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Exportar')]")
                btn_exportar.click()
                print("‚úÖ Bot√£o de exporta√ß√£o encontrado")
                self.resultados.append("‚úÖ Relat√≥rios - Exporta√ß√£o: BOT√ÉO ENCONTRADO")
            except:
                print("‚ùå Bot√£o de exporta√ß√£o n√£o encontrado")
                self.resultados.append("‚ùå Relat√≥rios - Exporta√ß√£o: BOT√ÉO N√ÉO ENCONTRADO")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste de relat√≥rios: {e}")
            return False
    
    def test_consultas_pacientes(self):
        """Testa a p√°gina de consultas e pacientes"""
        try:
            print("\nüè• Testando Consultas e Pacientes...")
            self.driver.get(f"{URL_BASE}/consultas.html")
            
            # Espera carregar
            self.wait.until(EC.presence_of_element_located((By.ID, "pacienteList")))
            
            # Verifica abas
            try:
                aba_pacientes = self.driver.find_element(By.ID, "pacientes-tab")
                aba_consultas = self.driver.find_element(By.ID, "consultas-tab")
                
                if "active" in aba_pacientes.get_attribute("class"):
                    print("‚úÖ Aba 'Pacientes' ativa")
                else:
                    print("‚ùå Aba 'Pacientes' n√£o est√° ativa")
                
                if "active" not in aba_consultas.get_attribute("class"):
                    print("‚úÖ Aba 'Consultas' inativa (correto)")
                else:
                    print("‚ùå Aba 'Consultas' est√° ativa (incorreto)")
                    
            except Exception as e:
                print(f"‚ùå Erro ao verificar abas: {e}")
            
            # Verifica lista de pacientes
            try:
                lista_pacientes = self.driver.find_element(By.ID, "pacienteList")
                if lista_pacientes.text:
                    print("‚úÖ Lista de pacientes populada")
                    self.resultados.append("‚úÖ Consultas - Lista Pacientes: POPULADA")
                else:
                    print("‚ùå Lista de pacientes vazia")
                    self.resultados.append("‚ùå Consultas - Lista Pacientes: VAZIA")
            except:
                print("‚ùå Erro ao verificar lista de pacientes")
                self.resultados.append("‚ùå Consultas - Lista Pacientes: ERRO")
            
            # Muda para aba de consultas
            try:
                aba_consultas.click()
                time.sleep(1)
                
                lista_consultas = self.driver.find_element(By.ID, "consultaList")
                if lista_consultas.text:
                    print("‚úÖ Lista de consultas populada")
                    self.resultados.append("‚úÖ Consultas - Lista Consultas: POPULADA")
                else:
                    print("‚ùå Lista de consultas vazia")
                    self.resultados.append("‚ùå Consultas - Lista Consultas: VAZIA")
                    
            except Exception as e:
                print(f"‚ùå Erro ao verificar lista de consultas: {e}")
                self.resultados.append("‚ùå Consultas - Lista Consultas: ERRO")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste de consultas: {e}")
            return False
    
    def test_agenda_medica(self):
        """Testa a agenda m√©dica"""
        try:
            print("\nüóìÔ∏è Testando Agenda M√©dica...")
            self.driver.get(f"{URL_BASE}/agenda.html")
            
            # Espera carregar
            self.wait.until(EC.presence_of_element_located((By.ID, "formAgenda")))
            
            # Verifica sele√ß√£o de m√©dico
            try:
                select_medico = self.driver.find_element(By.ID, "medico")
                if select_medico.text:
                    print("‚úÖ Lista de m√©dicos populada")
                    self.resultados.append("‚úÖ Agenda M√©dica - M√©dicos: POPULADA")
                else:
                    print("‚ùå Lista de m√©dicos vazia")
                    self.resultados.append("‚ùå Agenda M√©dica - M√©dicos: VAZIA")
            except:
                print("‚ùå Erro ao verificar lista de m√©dicos")
                self.resultados.append("‚ùå Agenda M√©dica - M√©dicos: ERRO")
            
            # Verifica sele√ß√£o de paciente
            try:
                select_paciente = self.driver.find_element(By.ID, "paciente")
                if select_paciente.text:
                    print("‚úÖ Lista de pacientes populada")
                    self.resultados.append("‚úÖ Agenda M√©dica - Pacientes: POPULADA")
                else:
                    print("‚ùå Lista de pacientes vazia")
                    self.resultados.append("‚ùå Agenda M√©dica - Pacientes: VAZIA")
            except:
                print("‚ùå Erro ao verificar lista de pacientes")
                self.resultados.append("‚ùå Agenda M√©dica - Pacientes: ERRO")
            
            # Verifica lista de agendas
            try:
                lista_agendas = self.driver.find_element(By.ID, "listaAgendas")
                if lista_agendas.text:
                    print("‚úÖ Lista de agendas populada")
                    self.resultados.append("‚úÖ Agenda M√©dica - Agendas: POPULADA")
                else:
                    print("‚ùå Lista de agendas vazia")
                    self.resultados.append("‚ùå Agenda M√©dica - Agendas: VAZIA")
            except:
                print("‚ùå Erro ao verificar lista de agendas")
                self.resultados.append("‚ùå Agenda M√©dica - Agendas: ERRO")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste de agenda m√©dica: {e}")
            return False
    
    def test_prescricoes(self):
        """Testa o sistema de prescri√ß√µes"""
        try:
            print("\nüíä Testando Prescri√ß√µes M√©dicas...")
            self.driver.get(f"{URL_BASE}/prescricoes.html")
            
            # Espera carregar
            self.wait.until(EC.presence_of_element_located((By.ID, "formPrescricao")))
            
            # Verifica sele√ß√£o de paciente
            try:
                select_paciente = self.driver.find_element(By.ID, "paciente")
                if select_paciente.text:
                    print("‚úÖ Lista de pacientes populada")
                    self.resultados.append("‚úÖ Prescri√ß√µes - Pacientes: POPULADA")
                else:
                    print("‚ùå Lista de pacientes vazia")
                    self.resultados.append("‚ùå Prescri√ß√µes - Pacientes: VAZIA")
            except:
                print("‚ùå Erro ao verificar lista de pacientes")
                self.resultados.append("‚ùå Prescri√ß√µes - Pacientes: ERRO")
            
            # Verifica lista de prescri√ß√µes
            try:
                lista_prescricoes = self.driver.find_element(By.ID, "listaPrescricoes")
                if lista_prescricoes.text:
                    print("‚úÖ Lista de prescri√ß√µes populada")
                    self.resultados.append("‚úÖ Prescri√ß√µes - Lista: POPULADA")
                else:
                    print("‚ùå Lista de prescri√ß√µes vazia")
                    self.resultados.append("‚ùå Prescri√ß√µes - Lista: VAZIA")
            except:
                print("‚ùå Erro ao verificar lista de prescri√ß√µes")
                self.resultados.append("‚ùå Prescri√ß√µes - Lista: ERRO")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste de prescri√ß√µes: {e}")
            return False
    
    def test_responsividade(self):
        """Testa a responsividade do sistema"""
        try:
            print("\nüì± Testando Responsividade...")
            
            # Testa diferentes tamanhos de tela
            tamanhos = [
                (1920, 1080, "Desktop"),
                (768, 1024, "Tablet"),
                (375, 667, "Mobile")
            ]
            
            for largura, altura, dispositivo in tamanhos:
                print(f"\nüîç Testando em {dispositivo} ({largura}x{altura})...")
                
                # Redimensiona janela
                self.driver.set_window_size(largura, altura)
                time.sleep(1)
                
                # Acessa dashboard
                self.driver.get(f"{URL_BASE}/dashboard.html")
                time.sleep(2)
                
                # Verifica se elementos principais est√£o vis√≠veis
                try:
                    # Verifica se o conte√∫do est√° vis√≠vel
                    conteudo = self.driver.find_element(By.CSS_SELECTOR, ".dashboard-card")
                    if conteudo.is_displayed():
                        print(f"‚úÖ Dashboard vis√≠vel em {dispositivo}")
                        self.resultados.append(f"‚úÖ Responsividade - {dispositivo}: VIS√çVEL")
                    else:
                        print(f"‚ùå Dashboard n√£o vis√≠vel em {dispositivo}")
                        self.resultados.append(f"‚ùå Responsividade - {dispositivo}: N√ÉO VIS√çVEL")
                except:
                    print(f"‚ùå Erro ao verificar dashboard em {dispositivo}")
                    self.resultados.append(f"‚ùå Responsividade - {dispositivo}: ERRO")
                
                # Verifica se elementos n√£o est√£o quebrados
                try:
                    elementos = self.driver.find_elements(By.CSS_SELECTOR, ".option-card")
                    elementos_visiveis = sum(1 for elem in elementos if elem.is_displayed())
                    print(f"‚úÖ {elementos_visiveis} cards vis√≠veis em {dispositivo}")
                except:
                    print(f"‚ùå Erro ao verificar cards em {dispositivo}")
            
            # Restaura tamanho original
            self.driver.maximize_window()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste de responsividade: {e}")
            return False
    
    def run_all_tests(self):
        """Executa todos os testes"""
        print("üöÄ Iniciando Suite de Testes SGHSS")
        print("=" * 50)
        
        if not self.setup_driver():
            print("‚ùå Falha ao configurar navegador")
            return False
        
        try:
            # Realiza login
            if not self.login():
                print("‚ùå Login falhou. Abortando testes.")
                return False
            
            # Executa testes individuais
            testes = [
                ("Dashboard", self.test_dashboard),
                ("Cadastro de Pacientes", self.test_cadastro_paciente),
                ("Agendamento de Consultas", self.test_agendamento_consulta),
                ("Prontu√°rios Eletr√¥nicos", self.test_prontuarios),
                ("Relat√≥rios Financeiros", self.test_relatorios),
                ("Consultas e Pacientes", self.test_consultas_pacientes),
                ("Agenda M√©dica", self.test_agenda_medica),
                ("Prescri√ß√µes M√©dicas", self.test_prescricoes),
                ("Responsividade", self.test_responsividade)
            ]
            
            for nome_teste, funcao_teste in testes:
                try:
                    funcao_teste()
                except Exception as e:
                    print(f"‚ùå Erro cr√≠tico no teste '{nome_teste}': {e}")
                    self.resultados.append(f"‚ùå {nome_teste}: ERRO CR√çTICO - {str(e)}")
            
            # Gera relat√≥rio final
            print("\n" + "=" * 50)
            print("üìã RELAT√ìRIO FINAL DE TESTES")
            print("=" * 50)
            
            total_testes = len(self.resultados)
            testes_sucesso = sum(1 for resultado in self.resultados if resultado.startswith("‚úÖ"))
            testes_falha = total_testes - testes_sucesso
            
            print(f"Total de testes executados: {total_testes}")
            print(f"Testes bem-sucedidos: {testes_sucesso}")
            print(f"Testes falhados: {testes_falha}")
            print(f"Taxa de sucesso: {(testes_sucesso/total_testes)*100:.1f}%")
            
            print("\nüìä Detalhamento dos resultados:")
            for resultado in self.resultados:
                print(f"  {resultado}")
            
            # Salva relat√≥rio em arquivo
            with open("relatorio_testes.txt", "w", encoding="utf-8") as f:
                f.write("RELAT√ìRIO DE TESTES SGHSS\n")
                f.write("=" * 30 + "\n\n")
                f.write(f"Data: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Total de testes: {total_testes}\n")
                f.write(f"Sucessos: {testes_sucesso}\n")
                f.write(f"Falhas: {testes_falha}\n")
                f.write(f"Taxa de sucesso: {(testes_sucesso/total_testes)*100:.1f}%\n\n")
                f.write("Resultados detalhados:\n")
                f.write("-" * 30 + "\n")
                for resultado in self.resultados:
                    f.write(f"{resultado}\n")
            
            print(f"\nüíæ Relat√≥rio salvo em: relatorio_testes.txt")
            
            return testes_sucesso > 0
            
        except Exception as e:
            print(f"‚ùå Erro na execu√ß√£o dos testes: {e}")
            return False
        
        finally:
            if self.driver:
                if not HEADLESS:
                    input("\nPressione Enter para fechar o navegador...")
                self.driver.quit()

def main():
    """Fun√ß√£o principal"""
    suite = SGHSSTestSuite()
    sucesso = suite.run_all_tests()
    
    if sucesso:
        print("\nüéâ Suite de testes conclu√≠da com sucesso!")
        sys.exit(0)
    else:
        print("\n‚ùå Suite de testes falhou!")
        sys.exit(1)

if __name__ == "__main__":
    main()